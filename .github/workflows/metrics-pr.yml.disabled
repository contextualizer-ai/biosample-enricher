name: Enrichment Performance Report

# Disabled - requires MongoDB access not available in CI
# on:
#   pull_request:
#     types: [opened, synchronize]
#   workflow_dispatch:

jobs:
  metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e .
      
      # TODO: Metrics evaluation disabled - requires MongoDB access not available in CI
      # Will need to add file-based input option for CI testing
      # - name: Run metrics evaluation (small sample)
      #   env:
      #     NMDC_MONGO_CONNECTION: ${{ secrets.NMDC_MONGO_CONNECTION }}
      #     GOLD_MONGO_CONNECTION: ${{ secrets.GOLD_MONGO_CONNECTION }}
      #   run: |
      #     uv run biosample-enricher metrics evaluate \
      #       --nmdc-samples 50 \
      #       --gold-samples 50 \
      #       --output-dir metrics-output \
      #       --create-plots
      
      - name: Create placeholder metrics report
        run: |
          mkdir -p metrics-output
          echo "# ðŸ“Š Enrichment Metrics Report" > metrics-report.md
          echo "" >> metrics-report.md
          echo "Metrics evaluation is currently disabled in CI." >> metrics-report.md
          echo "MongoDB access is required for biosample fetching." >> metrics-report.md
          echo "" >> metrics-report.md
          echo "Run \`make metrics-local\` locally to generate metrics." >> metrics-report.md
          echo "" >> metrics-report.md
          echo "_Updated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")_" >> metrics-report.md
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('metrics-report.md', 'utf8');
            
            // Find or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## ðŸ“Š Enrichment Metrics Report')
            );
            
            const body = `## ðŸ“Š Enrichment Metrics Report\n\n${report}\n\n*Updated: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }